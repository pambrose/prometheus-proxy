
proxy {
  agent.port = 50051                              // Listen port for agent connections

  transportFilterDisabled = false                 // Assign to true if using nginx as a reverse proxy

  reflectionDisabled = false                      // Assign to true to disable gRPC reflection

  service.discovery {
    enabled = false                               // Enable service discovery
    path = "discovery"                            // Service discovery path
    targetPrefix = "http://localhost:8080/"       // Service discovery target prefix
  }

  http {
    port = 8080                                   // Listen port for proxied scrapes
    maxThreads = -1
    minThreads = -1
    idleTimeoutSecs = 45
    requestLoggingEnabled = true                  // Log every proxy metrics request
  }

  admin {
    enabled = false                               // Enable Admin servlets
    port = 8092                                   // Admin servlets port
    pingPath = "ping"                             // Ping servlet path
    versionPath = "version"                       // Version servlet path
    healthCheckPath = "healthcheck"               // HealthCheck servlet path
    threadDumpPath = "threaddump"                 // ThreadDump servlet path
    debugEnabled = false                          // Enable proxy debug servlet on admin port
    recentRequestsQueueSize = 50                  // Size of queue for recent activities on debug servlet
  }

  tls {
    certChainFilePath = ""                        // Server certificate chain file path
    privateKeyFilePath = ""                       // Server private key file path
    trustCertCollectionFilePath = ""              // Trust certificate collection file path
  }

  metrics {
    enabled = false                               // Enable Proxy metrics
    port = 8082                                   // Listen port for metrics endpoint
    path = "metrics"                              // Path for metrics endpoint

    standardExportsEnabled = false                // Include standard export metrics
    memoryPoolsExportsEnabled = false             // Include JVM memory pool metrics
    garbageCollectorExportsEnabled = false        // Include JVM garbage collector metrics
    threadExportsEnabled = false                  // Include JVM thread metrics
    classLoadingExportsEnabled = false            // Include JVM class loading metrics
    versionInfoExportsEnabled = false             // Include JVM version info metrics

    grpc {
      metricsEnabled = false                      // Include gRPC metrics
      allMetricsReported = false                  // Include all vs just cheap metrics
    }
  }

  grpc {
    handshakeTimeoutSecs = "long | -1"
    keepAliveTimeSecs = "long | -1"
    keepAliveTimeoutSecs = "long | -1"
    permitKeepAliveWithoutCalls = false
    permitKeepAliveTimeSecs = "long | -1"
    maxConnectionIdleSecs = "long | -1"
    maxConnectionAgeSecs = "long | -1"
    maxConnectionAgeGraceSecs = "long | -1"
  }

  internal {
    staleAgentCheckEnabled = true
    maxAgentInactivitySecs = 60                   // Seconds of inactivity before agent is evicted in seconds
    staleAgentCheckPauseSecs = 10                 // Pause interval for agent cleanup in seconds

    scrapeRequestTimeoutSecs = 90                 // Timeout for scrape requests in seconds
    scrapeRequestCheckMillis = 500                // Pause time between checks for scrape request timeout in millis
    scrapeRequestBacklogUnhealthySize = 25        // Threshold for returning an unhealthy healthcheck
    scrapeRequestMapUnhealthySize = 25            // Threshold for returning an unhealthy healthcheck

    chunkContextMapUnhealthySize = 25             // Threshold for returning an unhealthy healthcheck

    zipkin {
      enabled = false
      hostname = "localhost"
      port = 9411
      path = "api/v2/spans"
      serviceName = "prometheus-proxy"
      grpcReportingEnabled = false
    }

    blitz {
      enabled = false
      path = "mu-dd4bffbb-ff2e9926-5a80952c-1c6cb64d.txt"
    }
  }
}

agent {
  name = ""                                       // Agent name used in metrics reporting

  transportFilterDisabled = false                 // Assign to true if using nginx as a reverse proxy

  consolidated = false

  // See: https://github.com/grpc/grpc.github.io/issues/371
  chunkContentSizeKbs = 32                        // Threshold for chunking data to Proxy and buffer size
  minGzipSizeBytes = 512                          // Minimum size for content to be gzipped

  scrapeTimeoutSecs = 15                          // Scrape timeout time in seconds
  scrapeMaxRetries = 0                            // Maximum scrape retries (0 disables scrape retries)

  proxy {
    hostname = "localhost"                        // Proxy hostname
    port = 50051                                  // Proxy port
  }

  http {
    enableTrustAllX509Certificates = false        // Enabling will disable SSL verification for agent https endpoints
  }

  admin {
    enabled = false                               // Enable Admin servlets
    port = 8093                                   // Admin servlets port
    pingPath = "ping"                             // Ping servlet path
    versionPath = "version"                       // Version servlet path
    healthCheckPath = "healthcheck"               // HealthCheck servlet path
    threadDumpPath = "threaddump"                 // ThreadDump servlet path
    debugEnabled = false                          // Enable agent debug servlet on admin port
  }

  tls {
    overrideAuthority = ""                        // Overide authority
    certChainFilePath = ""                        // Client certificate chain file path
    privateKeyFilePath = ""                       // Client private key file path
    trustCertCollectionFilePath = ""              // Trust certificate collection file path
  }

  metrics {
    enabled = false                               // Enable Agent metrics
    port = 8083                                   // Listen port for metrics endpoint
    path = "metrics"                              // Path for metrics endpoint

    standardExportsEnabled = false                // Include standard export metrics
    memoryPoolsExportsEnabled = false             // Include JVM memory pool metrics
    garbageCollectorExportsEnabled = false        // Include JVM garbage collector metrics
    threadExportsEnabled = false                  // Include JVM thread metrics
    classLoadingExportsEnabled = false            // Include JVM class loading metrics
    versionInfoExportsEnabled = false             // Include JVM version info metrics

    grpc {
      metricsEnabled = false                      // Include gRPC metrics
      allMetricsReported = false                  // Include all vs just cheap metrics
    }
  }

  pathConfigs: [                                  // List of path configs registered with a Proxy
    {
      name: String                                // Endpoint name
      path: String                                // Path used by the proxy
      url: String                                 // URL accessed by the Agent
      labels = "{}"                               // Endpoint labels as JSON
    }
  ]

  grpc {
    keepAliveTimeSecs = "long | -1"
    keepAliveTimeoutSecs = "long | -1"
    keepAliveWithoutCalls = false
  }

  internal {
    cioTimeoutSecs = 90                           // CIO engine request timeout in seconds

    reconnectPauseSecs = 3                        // Pause interval between connect attempts in seconds

    heartbeatEnabled = true
    heartbeatCheckPauseMillis = 500               // Pause interval when checking for inactivity
    heartbeatMaxInactivitySecs = 5                // Max inactivity before heartbeat sent in seconds

    scrapeRequestBacklogUnhealthySize = 25        // Threshold for returning an unhealthy healthcheck

    zipkin {
      enabled = false
      hostname = "localhost"
      port = 9411
      path = "api/v2/spans"
      serviceName = "prometheus-agent"
      grpcReportingEnabled = false
    }
  }
}
