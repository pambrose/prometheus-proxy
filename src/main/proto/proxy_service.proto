syntax = "proto3";
package proxy_service;

import public "google/protobuf/empty.proto";

option java_multiple_files = true;
option java_package = "io.prometheus.grpc";

message RegisterAgentRequest {
  string agent_id = 1;
  string agent_name = 2;
  string host_name = 3;
}

message RegisterAgentResponse {
  bool valid = 1;
  string reason = 2;
  string agent_id = 3;
  string proxy_url = 4;
}

message RegisterPathRequest {
  string agent_id = 1;
  string path = 2;
}

message RegisterPathResponse {
  bool valid = 1;
  string reason = 2;
  int32 path_count = 3;
  int64 path_id = 4;
}

message UnregisterPathRequest {
  string agent_id = 1;
  string path = 2;
}

message UnregisterPathResponse {
  bool valid = 1;
  string reason = 2;
}

message PathMapSizeRequest {
  string agent_id = 1;
}

message PathMapSizeResponse {
  int32 path_count = 1;
}

message AgentInfo {
  string agent_id = 1;
}

message ScrapeRequest {
  string agent_id = 1;
  int64 scrape_id = 2;
  string path = 3;
  string accept = 4;
  bool debug_enabled = 5;
}

message ScrapeResponse {
  bool valid_response = 1;
  string agent_id = 2;
  int64 scrape_id = 3;
  int32 status_code = 4;
  string content_text = 5;
  string content_type = 6;
  string failure_reason = 7;
  string url = 8;
}

message HeartBeatRequest {
  string agent_id = 1;
}

message HeartBeatResponse {
  bool valid = 1;
  string reason = 2;
}

service ProxyService {
  rpc connectAgent (google.protobuf.Empty) returns (google.protobuf.Empty) {
  }

  rpc registerAgent (RegisterAgentRequest) returns (RegisterAgentResponse) {
  }

  rpc registerPath (RegisterPathRequest) returns (RegisterPathResponse) {
  }

  rpc unregisterPath (UnregisterPathRequest) returns (UnregisterPathResponse) {
  }

  rpc pathMapSize (PathMapSizeRequest) returns (PathMapSizeResponse) {
  }

  rpc readRequestsFromProxy (AgentInfo) returns (stream ScrapeRequest) {
  }

  rpc writeResponsesToProxy (stream ScrapeResponse) returns (google.protobuf.Empty) {
  }

  rpc sendHeartBeat (HeartBeatRequest) returns (HeartBeatResponse) {
  }
}

