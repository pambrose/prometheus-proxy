plugins {
    id 'idea'
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'com.google.protobuf' version '0.8.18'
    id 'org.jmailen.kotlinter' version "3.9.0"
    id "com.github.ben-manes.versions" version '0.42.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'com.github.gmazzo.buildconfig' version '3.0.3'
    // Turn these off until jacoco fixes their kotlin 1.5.0 SMAP issue
    // id 'jacoco'
    // id 'com.github.kt3k.coveralls' version '2.12.0'
}

group = 'io.prometheus'
version = '1.13.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven { url 'https://maven.pkg.jetbrains.space/public/p/ktor/eap'; name 'ktor-eap' }
    google()
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

    implementation "io.grpc:grpc-netty:$grpc_version"
    implementation "io.grpc:grpc-protobuf:$grpc_version"
    implementation "io.grpc:grpc-stub:$grpc_version"
    implementation "io.grpc:grpc-services:$grpc_version"

    implementation "io.grpc:grpc-kotlin-stub:$gengrpc_version"

    implementation "com.github.pambrose.common-utils:core-utils:$utils_version"
    implementation "com.github.pambrose.common-utils:corex-utils:$utils_version"
    implementation "com.github.pambrose.common-utils:dropwizard-utils:$utils_version"
    implementation "com.github.pambrose.common-utils:guava-utils:$utils_version"
    implementation "com.github.pambrose.common-utils:grpc-utils:$utils_version"
    implementation "com.github.pambrose.common-utils:jetty-utils:$utils_version"
    implementation "com.github.pambrose.common-utils:ktor-client-utils:$utils_version"
    implementation "com.github.pambrose.common-utils:prometheus-utils:$utils_version"
    implementation "com.github.pambrose.common-utils:service-utils:$utils_version"
    implementation "com.github.pambrose.common-utils:zipkin-utils:$utils_version"

    implementation "org.eclipse.jetty:jetty-servlet:$jetty_version"

    implementation "javax.annotation:javax.annotation-api:$annotation_version"
    implementation "com.beust:jcommander:$jcommander_version"
    implementation "com.typesafe:config:$typesafe_version"

    implementation "io.prometheus:simpleclient:$prometheus_version"

    implementation "io.ktor:ktor-server:$ktor_version"
    implementation "io.ktor:ktor-server-cio:$ktor_version"
    implementation "io.ktor:ktor-client:$ktor_version"
    implementation "io.ktor:ktor-client-cio:$ktor_version"
    implementation "io.ktor:ktor-client-auth:$ktor_version"

    implementation "io.dropwizard.metrics:metrics-healthchecks:$dropwizard_version"

    implementation "io.zipkin.brave:brave-instrumentation-grpc:$zipkin_version"

    implementation "io.github.microutils:kotlin-logging:$logging_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "org.slf4j:jul-to-slf4j:$slf4j_version"

    testImplementation "org.amshove.kluent:kluent:$kluent_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
}

buildConfig {
    buildConfigField('String', 'APP_NAME', "\"${project.name}\"")
    buildConfigField('String', 'APP_VERSION', "\"${project.version}\"")
    buildConfigField('String', 'APP_RELEASE_DATE', "\"3/3/22\"")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
}

compileKotlin.dependsOn ':generateProto'

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protoc_version"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpc_version"
        }

        // Specify protoc to generate using our grpc kotlin plugin
        grpckt {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:$gengrpc_version:jdk7@jar"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                // Generate Java gRPC classes
                grpc {}
                // Generate Kotlin gRPC using the custom plugin from library
                grpckt {}
            }
        }
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

//startScripts.enabled = false

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    //archives javadocJar
}

java {
    withSourcesJar()
}

//jacocoTestReport {
//    reports {
//        xml.enabled true
//        html.enabled true
//    }
//
//    afterEvaluate {
//        getClassDirectories().setFrom(files(classDirectories.files.collect {
//            fileTree(dir: it,
//                    excludes: [
//                            '**/ConfigVals*',
//                            'io/prometheus/grpc/**'
//                    ])
//        }))
//    }
//}

//check.dependsOn jacocoTestReport

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Required for multiple uberjar targets
shadowJar {
    mergeServiceFiles()
}

task agentJar(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'prometheus-agent.jar'
    manifest {
        attributes('Main-Class': 'io.prometheus.Agent')
    }
    from zipTree(shadowJar.archiveFile)
}

task proxyJar(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'prometheus-proxy.jar'
    manifest {
        attributes('Main-Class': 'io.prometheus.Proxy')
    }
    from zipTree(shadowJar.archiveFile)
}

compileKotlin.dependsOn ':generateProto'

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ['-Xbackend-threads=8',
                             "-opt-in=kotlin.time.ExperimentalTime",
                             "-opt-in=kotlin.contracts.ExperimentalContracts",
                             "-opt-in=kotlin.ExperimentalUnsignedTypes",
                             "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                             "-opt-in=kotlinx.coroutines.InternalCoroutinesApi"]
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ['-Xbackend-threads=8',
                             "-opt-in=kotlinx.coroutines.InternalCoroutinesApi",
                             "-opt-in=kotlinx.coroutines.DelicateCoroutinesApi"]
    }
}

test {
    useJUnitPlatform()

    // finalizedBy jacocoTestReport

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams = true
    }
}

kotlinter {
    ignoreFailures = false
    indentSize = 2
    reporters = ['checkstyle', 'plain']
    experimentalRules = false
    disabledRules = ["no-wildcard-imports", "indent", "final-newline", "comment-spacing", "max-line-length", "no-multi-spaces", "no-trailing-spaces"]
}