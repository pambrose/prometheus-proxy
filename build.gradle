plugins {
  id 'idea'
  id 'java'
  id 'org.jetbrains.kotlin.jvm' version '1.3.61'
  id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.61'
  id 'com.google.protobuf' version '0.8.10'
  id "com.github.ben-manes.versions" version '0.27.0'
  id 'com.github.johnrengelman.shadow' version '5.2.0'
}

group = 'io.prometheus'
version = '1.6.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def annotationVersion = '1.3.2'
def coroutinesVersion = '1.3.3'
def dropwizardVersion = '4.1.2'
def grpcVersion = '1.25.0'
def prometheusVersion = '0.8.0'
def jcommanderVersion = '1.78'
def jettyVersion = '9.4.22.v20191022'
def junitVersion = '5.5.2'
def kluentVersion = '1.58'
def ktorVersion = '1.2.6'
def logbackVersion = '1.2.3'
def loggingVersion = '1.7.8'
def protocVersion = '3.10.0'
def serializationVersion = '0.13.0'
def slf4jVersion = '1.7.28'
def tscfgVersion = '1.3.4'
def utilsVersion = '1.1.13'
def zipkinVersion = '5.9.1'

repositories {
  maven { url = "https://kotlin.bintray.com/kotlinx" }
  maven { url = 'https://maven-central.storage-download.googleapis.com/repos/central/data/' }
  jcenter()
  maven { url = 'https://jitpack.io' }
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
  implementation "org.jetbrains.kotlin:kotlin-reflect"

  implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${serializationVersion}"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutinesVersion}"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${coroutinesVersion}"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j:${coroutinesVersion}"

  implementation "io.grpc:grpc-all:${grpcVersion}"

  implementation "com.github.pambrose.common-utils:core-utils:${utilsVersion}"
  implementation "com.github.pambrose.common-utils:corex-utils:${utilsVersion}"
  implementation "com.github.pambrose.common-utils:dropwizard-utils:${utilsVersion}"
  implementation "com.github.pambrose.common-utils:guava-utils:${utilsVersion}"
  implementation "com.github.pambrose.common-utils:grpc-utils:${utilsVersion}"
  implementation "com.github.pambrose.common-utils:jetty-utils:${utilsVersion}"
  implementation "com.github.pambrose.common-utils:ktor-client-utils:${utilsVersion}"
  implementation "com.github.pambrose.common-utils:prometheus-utils:${utilsVersion}"
  implementation "com.github.pambrose.common-utils:service-utils:${utilsVersion}"
  implementation "com.github.pambrose.common-utils:zipkin-utils:${utilsVersion}"

  implementation "org.eclipse.jetty:jetty-servlet:${jettyVersion}"

  implementation "javax.annotation:javax.annotation-api:${annotationVersion}"
  implementation "com.beust:jcommander:${jcommanderVersion}"
  implementation "com.typesafe:config:${tscfgVersion}"

  implementation "io.prometheus:simpleclient:${prometheusVersion}"

  implementation "io.ktor:ktor-server-core:${ktorVersion}"
  implementation "io.ktor:ktor-server-cio:${ktorVersion}"
  implementation "io.ktor:ktor-client-core:${ktorVersion}"
  implementation "io.ktor:ktor-client-cio:${ktorVersion}"

  implementation "io.dropwizard.metrics:metrics-healthchecks:${dropwizardVersion}"

  implementation "io.zipkin.brave:brave-instrumentation-grpc:${zipkinVersion}"

  implementation "ch.qos.logback:logback-classic:${logbackVersion}"
  implementation "org.slf4j:jul-to-slf4j:${slf4jVersion}"
  implementation "io.github.microutils:kotlin-logging:${loggingVersion}"

  testImplementation "org.amshove.kluent:kluent:${kluentVersion}"
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

compileKotlin.dependsOn ':generateProto'

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:${protocVersion}"
  }
  plugins {
    grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {}
    }
  }
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

//startScripts.enabled = false

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
//archives javadocJar
}

/*
jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}
*/

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

compileKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
    freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                         '-Xuse-experimental=kotlinx.serialization.UnstableDefault',
                         '-Xuse-experimental=kotlin.ExperimentalUnsignedTypes',
                         '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                         '-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi',
                         '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI',
                         '-Xuse-experimental=kotlinx.serialization.UnstableDefault']
  }
}

compileTestKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
    freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                         '-Xuse-experimental=kotlinx.serialization.UnstableDefault',
                         '-Xuse-experimental=kotlin.ExperimentalUnsignedTypes',
                         '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                         '-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi',
                         '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI',
                         '-Xuse-experimental=kotlinx.serialization.UnstableDefault']
  }
}

shadowJar {
  mergeServiceFiles()
}

task agentJar(type: Jar, dependsOn: shadowJar) {
  archiveFileName = 'prometheus-agent.jar'
  manifest {
    attributes('Main-Class': 'io.prometheus.Agent')
  }
  from zipTree(shadowJar.archiveFile)
}

task proxyJar(type: Jar, dependsOn: shadowJar) {
  archiveFileName = 'prometheus-proxy.jar'
  manifest {
    attributes('Main-Class': 'io.prometheus.Proxy')
  }
  from zipTree(shadowJar.archiveFile)
}

test {
  useJUnitPlatform()

  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
    exceptionFormat "full"
    showStandardStreams = true
  }
}